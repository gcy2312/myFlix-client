var helpers = require("../../../../../AppData/Roaming/nvm/v14.16.1/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  _parcelHelpers.export(exports, "ProfileView", function () {
    return ProfileView;
  });
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _propTypes = require('prop-types');
  var _propTypesDefault = _parcelHelpers.interopDefault(_propTypes);
  var _axios = require("axios");
  var _axiosDefault = _parcelHelpers.interopDefault(_axios);
  require('react-redux');
  require('../../actions/actions');
  var _reactRouterDom = require("react-router-dom");
  var _reactBootstrap = require('react-bootstrap');
  var _reactBootstrapButton = require('react-bootstrap/Button');
  var _reactBootstrapButtonDefault = _parcelHelpers.interopDefault(_reactBootstrapButton);
  var _reactBootstrapForm = require("react-bootstrap/Form");
  var _reactBootstrapFormDefault = _parcelHelpers.interopDefault(_reactBootstrapForm);
  var _reactBootstrapCol = require("react-bootstrap/Col");
  var _reactBootstrapColDefault = _parcelHelpers.interopDefault(_reactBootstrapCol);
  var _reactBootstrapRow = require("react-bootstrap/Row");
  var _reactBootstrapRowDefault = _parcelHelpers.interopDefault(_reactBootstrapRow);
  var _urlImgTrashSvg = require('url:../../img/trash.svg');
  var _urlImgTrashSvgDefault = _parcelHelpers.interopDefault(_urlImgTrashSvg);
  require('./profile-view.scss');
  var _jsxFileName = "C:\\Users\\gmacy\\.vscode\\myFlix-client\\src\\components\\profile-view\\profile-view.jsx";
  class ProfileView extends _reactDefault.default.Component {
    // constructor(props) {
    // super(props);
    // this.state = {
    // UsernameError: "",
    // PasswordError: "",
    // EmailError: "",
    // BirthdayError: ""
    // };
    // }
    removeFavorite(movie) {
      const token = localStorage.getItem("token");
      _axiosDefault.default.delete("https://myflix-movie-api-2312.herokuapp.com/users/" + localStorage.getItem("user") + "/favorites/" + movie._id, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }).then(response => {
        console.log(response);
        location.reload();
        alert(movie.Title + " has been removed from your Favorites.");
      });
    }
    handleDelete() {
      const token = localStorage.getItem("token");
      const user = localStorage.getItem("user");
      _axiosDefault.default.delete(`https://myflix-movie-api-2312.herokuapp.com/users/${user}`, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }).then(() => {
        alert(user + " account has been deleted.");
        localStorage.removeItem("user");
        localStorage.removeItem("token");
        window.location.pathname = "/";
      }).catch(function (error) {
        console.log(error);
      });
    }
    /*handleUpdate() {*/
    /*let token = localStorage.getItem("token");*/
    /*let user = localStorage.getItem("user");*/
    /*let setisValid = this.formValidation();*/
    /*if (setisValid) {*/
    /*axios.put(`https://myflix-movie-api-2312.herokuapp.com/users/${user}`, {*/
    /*Username: user.Username,*/
    /*Password: user.Password,*/
    /*Email: user.Email,*/
    /*Birthday: user.Birthday*/
    /*},*/
    /*{*/
    /*headers: { Authorization: `Bearer ${token}` }*/
    /*})*/
    /*.then((response) => {*/
    /*const data = response.data;*/
    /*localStorage.setItem("user", data.user);*/
    /*console.log(data);*/
    /*alert(user + "account has been updated.");*/
    /*console.log(res);*/
    /*})*/
    /*.catch(function (err) {*/
    /*console.log(err.response.data);*/
    /*});*/
    /*}*/
    /*}*/
    /*formValidation() {*/
    /*// const userData = localStorage.getItem("user");*/
    /*// console.log("formvalidation", user);*/
    /*// let UsernameError = {};*/
    /*// let EmailError = {};*/
    /*// let PasswordError = {};*/
    /*// let BirthdayError = {};*/
    /*let isValid = true;*/
    /*// if (user.Username.trim().length < 5) {*/
    /*//   UsernameError.usernameShort = "Username be alphanumeric characters only and contains at least 5 characters";*/
    /*//   isValid = false;*/
    /*// }*/
    /*// if (user.Password.trim().length < 3) {*/
    /*//   PasswordError.passwordMissing = "You must enter a password.(minimum 4 characters) ";*/
    /*//   isValid = false;*/
    /*// }*/
    /*// if (!(user.Email && user.Email.includes(".") && user.Email.includes("@"))) {*/
    /*//   EmailError.emailNotEmail = "A valid email address is required.";*/
    /*//   isValid = false;*/
    /*// }*/
    /*// if (user.birthday === '') {*/
    /*//   BirthdayError.birthdayEmpty = "Please enter your birthday.";*/
    /*//   isValid = false;*/
    /*// }*/
    /*// this.setState({*/
    /*//   UsernameError: UsernameError,*/
    /*//   PasswordError: PasswordError,*/
    /*//   EmailError: EmailError,*/
    /*//   // ConfirmPasswordError: ConfirmPasswordError,*/
    /*//   BirthdayError: BirthdayError,*/
    /*// })*/
    /*return isValid;*/
    /*};*/
    /*handleChange(e) {*/
    /*let { name, value } = e.target;*/
    /*this.setState({*/
    /*[name]: value*/
    /*})*/
    /*}*/
    render() {
      const {movies, user} = this.props;
      console.log("render ProfileView", user);
      const FavoriteMovieList = movies.filter(movie => {
        return user.FavoriteMovies.includes(movie._id);
      });
      const [usernameError, setUsernameError] = useState({});
      const [passwordError, setPasswordError] = useState({});
      const [emailError, setEmailError] = useState({});
      const [birthdayError, setBirthdayError] = useState({});
      const handleSubmit = e => {
        e.preventDefault();
        let setisValid = formValidation();
        // console.log(username, password, email, birthday);
        if (setisValid) {
          _axiosDefault.default.put(`https://myflix-movie-api-2312.herokuapp.com/users/${user}`, {
            Username: username,
            Password: password,
            Email: email,
            Birthday: birthday
          }).then(response => {
            const data = response.data;
            console.log(data);
            window.open('/', '_self');
          }).catch(e => {
            console.log('error registering the user');
          });
        }
        ;
      };
      const formValidation = () => {
        let usernameError = {};
        let passwordError = {};
        let emailError = {};
        let birthdayError = {};
        let isValid = true;
        if (username.trim().length < 5) {
          usernameError.usernameShort = "Username be alphanumeric characters only and contains at least 5 characters";
          isValid = false;
        }
        if (password.trim().length < 3) {
          passwordError.passwordMissing = "You must enter a password.(minimum 4 characters) ";
          isValid = false;
        }
        if (!(email && email.includes(".") && email.includes("@"))) {
          emailError.emailNotEmail = "A valid email address is required.";
          isValid = false;
        }
        if (birthday === '') {
          birthdayError.birthdayEmpty = "Please enter your birthday.";
          isValid = false;
        }
        setUsernameError(usernameError);
        setPasswordError(passwordError);
        setEmailError(emailError);
        setBirthdayError(birthdayError);
        return isValid;
      };
      return (
        /*#__PURE__*/_reactDefault.default.createElement("div", {
          className: "flexWrap",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 196,
            columnNumber: 7
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapRowDefault.default, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 197,
            columnNumber: 9
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
          md: 6,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 198,
            columnNumber: 11
          }
        }, /*#__PURE__*/_reactDefault.default.createElement("div", {
          id: "userForm",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 200,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default, {
          className: "profile-details-form",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 202,
            columnNumber: 15
          }
        }, /*#__PURE__*/_reactDefault.default.createElement("h4", {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 203,
            columnNumber: 17
          }
        }, "User Profile:"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Group, {
          controlId: "formUsername",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 204,
            columnNumber: 17
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Label, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 205,
            columnNumber: 19
          }
        }, "Username:"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Control, {
          type: "text",
          name: "Username",
          value: user.Username,
          onChange: e => setUsername(e.target.value),
          placeholder: "Change Username",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 206,
            columnNumber: 19
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Text, {
          id: "usernameHelpBlock",
          muted: true,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 214,
            columnNumber: 19
          }
        }, "Username must be a minimum of 5 characters")), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Group, {
          controlId: "formPassword",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 218,
            columnNumber: 17
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Label, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 219,
            columnNumber: 19
          }
        }, "Password: "), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.FormControl, {
          type: "password",
          name: "Password",
          onChange: e => setPassword(e.target.value),
          placeholder: "Change Your Password",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 220,
            columnNumber: 19
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Text, {
          id: "passwordHelpBlock",
          muted: true,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 228,
            columnNumber: 19
          }
        }, "Password must be a minimum of 4 characters")), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Group, {
          controlId: "formEmail",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 232,
            columnNumber: 17
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Label, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 233,
            columnNumber: 19
          }
        }, "Email:"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Control, {
          type: "text",
          name: "Email",
          value: user.Email,
          onChange: e => setEmail(e.target.value),
          placeholder: "john.doe@email.com",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 234,
            columnNumber: 19
          }
        })), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Group, {
          controlId: "formBirthday",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 243,
            columnNumber: 17
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Label, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 244,
            columnNumber: 19
          }
        }, "Birthday:"), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapFormDefault.default.Control, {
          type: "date",
          name: "Birthday",
          onChange: e => setBirthday(e.target.value),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 245,
            columnNumber: 19
          }
        })), /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Link, {
          to: `/users/${user.Username}`,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 254,
            columnNumber: 17
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapButtonDefault.default, {
          id: "save-btn",
          variant: "outline-warning",
          block: true,
          onClick: handleSubmit,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 255,
            columnNumber: 19
          }
        }, "Save Changes"))), /*#__PURE__*/_reactDefault.default.createElement("br", {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 258,
            columnNumber: 15
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapButtonDefault.default, {
          variant: "outline-warning",
          block: true,
          onClick: () => this.handleDelete(),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 259,
            columnNumber: 15
          }
        }, "Delete Account"))), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
          md: 6,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 266,
            columnNumber: 11
          }
        }, /*#__PURE__*/_reactDefault.default.createElement("div", {
          id: "favoriteMovies",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 267,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement("h4", {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 269,
            columnNumber: 15
          }
        }, "Your Favorite Movies:"), FavoriteMovieList.map(movie => {
          return (
            /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card, {
              id: "card",
              className: "movie-card mb-2",
              text: "white",
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 272,
                columnNumber: 19
              }
            }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card.Img, {
              variant: "top",
              src: movie.PosterPath,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 273,
                columnNumber: 21
              }
            }), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Card.Body, {
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 274,
                columnNumber: 21
              }
            }, /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Link, {
              to: `/movies/${movie._id}`,
              id: "link",
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 275,
                columnNumber: 23
              }
            }, movie.Title), /*#__PURE__*/_reactDefault.default.createElement("button", {
              type: "button",
              className: "btn btn-white btn-rounded mr-md-3 z-depth-1a",
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 278,
                columnNumber: 23
              }
            }, /*#__PURE__*/_reactDefault.default.createElement("img", {
              id: "trash-img",
              alt: "",
              src: _urlImgTrashSvgDefault.default,
              width: "20",
              height: "20",
              fluid: "true",
              onClick: () => this.removeFavorite(movie),
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 279,
                columnNumber: 25
              }
            }))))
          );
        })))))
      );
    }
  }
  ProfileView.propType = {
    movies: _propTypesDefault.default.array.isRequired
  };
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
