var helpers = require("../../../../../AppData/Roaming/nvm/v14.16.1/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  _parcelHelpers.export(exports, "MainView", function () {
    return MainView;
  });
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _axios = require('axios');
  var _axiosDefault = _parcelHelpers.interopDefault(_axios);
  var _loginViewLoginView = require('../login-view/login-view');
  var _registrationViewRegistrationView = require('../registration-view/registration-view');
  var _movieCardMovieCard = require('../movie-card/movie-card');
  var _movieViewMovieView = require('../movie-view/movie-view');
  var _jsxFileName = "C:\\Users\\gmacy\\.vscode\\myFlix-client\\src\\components\\main-view\\main-view.jsx";
  class MainView extends _reactDefault.default.Component {
    constructor() {
      super();
      this.state = {
        movies: [],
        selectedMovie: null,
        user: null
      };
    }
    componentDidMount() {
      _axiosDefault.default.get('https://myflix-movie-api-2312.herokuapp.com/movies').then(response => {
        this.setState({
          movies: response.data
        });
      }).catch(error => {
        console.log(error);
      });
    }
    /*when movie clicked, this function updates state of 'selectedMovie' property to that movie//*/
    setSelectedMovie(movie) {
      this.setState({
        selectedMovie: movie
      });
    }
    /*when user successfully logs in - function updates 'user' property in state to that particular user//*/
    onLoggedIn(user) {
      this.setState({
        user
      });
    }
    /*when user successfully regsiters - function updates 'user property in state to that partcular user//*/
    onRegsiter(newUser) {
      this.setState({
        newUser
      });
    }
    onBackClick() {
      this.setState({
        selectedMovie: null
      });
    }
    render() {
      const {movies, selectedMovie, user, register} = this.state;
      // if no user logged in - LoginView rendered//
      // if user logs in, user details are passed as prop to LoginView//
      if (!user) return (
        /*#__PURE__*/_reactDefault.default.createElement(_loginViewLoginView.LoginView, {
          onLoggedIn: user => this.onLoggedIn(user),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 65,
            columnNumber: 23
          }
        })
      );
      if (!newUser) return (
        /*#__PURE__*/_reactDefault.default.createElement(_registrationViewRegistrationView.RegistrationView, {
          onRegister: newUser => this.onRegister(newUser),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 68,
            columnNumber: 26
          }
        })
      );
      // before movies loaded//
      if (movies.length === 0) return (
        /*#__PURE__*/_reactDefault.default.createElement("div", {
          className: "main-view",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 71,
            columnNumber: 37
          }
        })
      );
      // if state of 'selectedMovie' not null, that specific movie is returned, otherwise list of all movies returned//
      return (
        /*#__PURE__*/_reactDefault.default.createElement("div", {
          className: "main-view",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 75,
            columnNumber: 7
          }
        }, selectedMovie ? /*#__PURE__*/_reactDefault.default.createElement(_movieViewMovieView.MovieView, {
          movie: selectedMovie,
          onBackClick: newSelectedMovie => {
            this.setSelectedMovie(newSelectedMovie);
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 77,
            columnNumber: 13
          }
        }) : movies.map(movie => /*#__PURE__*/_reactDefault.default.createElement(_movieCardMovieCard.MovieCard, {
          key: movie._id,
          movie: movie,
          onMovieClick: newSelectedMovie => {
            this.setSelectedMovie(newSelectedMovie);
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 79,
            columnNumber: 13
          }
        })))
      );
    }
  }
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
